pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket
    }
  }
  stages {
    stage('Checkout') {
      steps {
        script {
          // Clean up existing directory and checkout the branch
          sh '''
            if [ -d JENKINS-CI_CD ]; then
              rm -rf JENKINS-CI_CD
            fi
            git clone --branch main https://github.com/pnyn96/JENKINS-CI_CD.git
          '''
        }
      }
    }
    stage('Build and Test') {
      steps {
        script {
          // Navigate to the project directory
          sh '''
            cd JENKINS-CI_CD/java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn clean package
          '''
        }
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.138.36.230:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd JENKINS-CI_CD/java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "yashu7862/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh '''
            cd JENKINS-CI_CD/java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          script {
            sh '''
              cd JENKINS-CI_CD
              git config user.email "yashukrishna.xyz@gmail.com"
              git config user.name "Yashasvi Lonewolf"
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              echo "target/" >> .gitignore
              git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              git add .gitignore
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git push https://${GITHUB_TOKEN}@github.com/pnyn96/JENKINS-CI_CD HEAD:main
            '''
          }
        }
      }
    }
  }
}
